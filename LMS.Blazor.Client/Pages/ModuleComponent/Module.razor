@page "/module/{courseId:int}"
@rendermode InteractiveWebAssembly

@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.CourseDTO
@using LMS.Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using LMS.Blazor.Client.Pages.DocumentComponent

@attribute [Authorize]

<h3>Existing Modules</h3>
@if (modules == null)
{
    <p>Loading modules...</p>
}
else if (modules.Count == 0)
{
    <p>No modules found for this course.</p>
}
else
{
    <div class="list-group mt-4">
        @foreach (var module in modules)
        {
            <div class="list-group-item mb-3" style="padding: 5px;">
                <div class="p-2" style="background-color: lightblue; border-radius: 5px;">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="fw-bold d-inline">@module.Name</h5> :
                            <span class="ms-2">@module.Description</span>
                        </div>

                        <div class="d-flex gap-2">
                            <a href="/addactivity/@module.Id" class="btn btn-success">Add Activity</a>
                            <a href="/adddocument/@courseId/@module.Id" class="btn btn-primary">Add Document</a>
                            <a href="/documentlist/@courseId/@module.Id" class="btn btn-primary">Document List</a>
                        </div>

                    </div>
                    <hr />
                    <div class="mt-1">
                        <p class="mb-1">Start Date: @module.StartDate.ToShortDateString()</p>
                        <p class="mb-1">End Date: @module.EndDate.ToShortDateString()</p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Inject]
    private IApiService _apiService { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    [Parameter]
    public int courseId { get; set; }

    private ModuleDto newModuleDto = new() { StartDate = DateTime.Now, EndDate = DateTime.Now.AddDays(7) };
    private List<ModuleDto>? modules;
    private CourseDto? course; // Add a property to hold the course details
    private string? SuccessMessage;

    protected override async Task OnInitializedAsync()
    {
        await FetchModulesAsync();
        await FetchCourseAsync(); // Fetch the course details
    }

    private async Task AddModuleAsync()
    {
        var createdModule = await _apiService.PostAsync<ModuleDto, ModuleDto>($"api/courses/{courseId}/module", newModuleDto);

        if (createdModule != null)
        {
            SuccessMessage = "Module created successfully!";
            await FetchModulesAsync(); // Fetch the updated list of modules
            newModuleDto = new ModuleDto { StartDate = DateTime.Now, EndDate = DateTime.Now.AddDays(7) }; // Reset form
        }
        else
        {
            SuccessMessage = "Failed to create the module.";
        }
    }

    private async Task FetchModulesAsync()
    {
        try
        {
            modules = (await _apiService.GetAsync<IEnumerable<ModuleDto>>($"api/courses/{courseId}/module"))?.ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching modules: {ex.Message}");
        }
    }

    private async Task FetchCourseAsync()
    {
        try
        {
            course = await _apiService.GetAsync<CourseDto>($"api/courses/{courseId}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching course: {ex.Message}");
        }
    }
}
