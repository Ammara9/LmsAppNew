@page "/addactivity/{moduleId:int}/"
@rendermode InteractiveWebAssembly

@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

@attribute [Authorize]

@if (module != null)
{
    <h1 class="px-5" style="text-align: center; color: darkblue; margin-bottom: 20px;">Welcome to the @module.Name Module!</h1>
}
<div class="d-flex justify-content-center align-items-center px-3 py-5">
    <div class="card shadow-lg" style="background-color: #f0f8ff; border: 1px solid #ccc; border-radius: 15px; width: 100%; max-width: 600px;">
        <div class="card-body">
            <h2 class="text-center text-primary mb-4">Add a New Activity</h2>

            <EditForm Model="newActivityDto" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group row mb-4">
                    <label for="name" class="col-sm-12 col-md-3 col-form-label fw-bold">Name</label>
                    <div class="col-sm-12 col-md-9">
                        <InputText id="name" class="form-control form-control-lg" @bind-Value="newActivityDto.Name" placeholder="Enter activity name" />
                    </div>
                </div>

                <div class="form-group row mb-4">
                    <label for="description" class="col-sm-12 col-md-3 col-form-label fw-bold">Description</label>
                    <div class="col-sm-12 col-md-9">
                        <InputText id="description" class="form-control form-control-lg" @bind-Value="newActivityDto.Description" placeholder="Enter activity description" />
                    </div>
                </div>

                <div class="form-group row mb-4">
                    <label for="startDate" class="col-sm-12 col-md-3 col-form-label fw-bold">Start Date</label>
                    <div class="col-sm-12 col-md-9">
                        <InputDate id="startDate" class="form-control form-control-lg" @bind-Value="newActivityDto.StartDate" />
                    </div>
                </div>

                <div class="form-group row mb-4">
                    <label for="endDate" class="col-sm-12 col-md-3 col-form-label fw-bold">End Date</label>
                    <div class="col-sm-12 col-md-9">
                        <InputDate id="endDate" class="form-control form-control-lg" @bind-Value="newActivityDto.EndDate" />
                    </div>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <a href="/modules" class="btn btn-outline-primary">Back to Module</a>
                    <button type="submit" class="btn btn-success" @onclick="AddActivityAsync">Submit</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success mt-2">@SuccessMessage</div>
}
@code {
    [Inject]
    private IApiService _apiService { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    [Parameter]
    public int moduleId { get; set; }

    private ActivitiesDto newActivityDto = new() { StartDate = DateTime.Now, EndDate = DateTime.Now.AddDays(7) };
    private List<ActivitiesDto>? activities;
    private ModuleDto? module; // Add a property to hold the module details
    private string? SuccessMessage;

    protected override async Task OnInitializedAsync()
    {
        await FetchActivitiesAsync();
        await FetchModuleAsync(); // Fetch the module details
    }

    private async Task AddActivityAsync()
    {
        var createdActivity = await _apiService.PostAsync<ActivitiesDto, ActivitiesDto>($"api/modules/{moduleId}/activities", newActivityDto);

        if (createdActivity != null)
        {
            SuccessMessage = "Activity created successfully!";
            await FetchActivitiesAsync(); // Fetch the updated list of activities
            newActivityDto = new ActivitiesDto { StartDate = DateTime.Now, EndDate = DateTime.Now.AddDays(7) }; // Reset form
        }
        else
        {
            SuccessMessage = "Failed to create the activity.";
        }
    }

    private async Task FetchActivitiesAsync()
    {
        try
        {
            activities = (await _apiService.GetAsync<IEnumerable<ActivitiesDto>>($"api/module/{moduleId}/activities"))?.ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching activities: {ex.Message}");
        }
    }

    private async Task FetchModuleAsync()
    {
        try
        {
            module = await _apiService.GetAsync<ModuleDto>($"api/module/{moduleId}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching module: {ex.Message}");
        }
    }
}