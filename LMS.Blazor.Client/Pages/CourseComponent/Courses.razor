@page "/courses"
@rendermode InteractiveWebAssembly

@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.CourseDTO
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation

@attribute [Authorize]

<h1>Courses</h1>
<div style="display: flex; gap: 10px;">
    @* <a href="/addcourse" class="btn btn-success mx-2">Add Course</a> *@
    <button class="btn btn-primary mb-6 d-block" Loading="true" @onclick="CallAPIAsync">Refresh Courses</button>
 </div>

@if (courses == null)
{
    <p class="text-center">Loading...</p>
}
else
{
    <!-- Modify the row-cols-md to 4 to show 4 cards per row on medium screens and above -->
    <div class="container mt-4">
        <div class="row row-cols-1 row-cols-md-2 g-4">
            @foreach (var item in courses)
            {
                <div class="col">
                    <div class="card border-secondary h-100">
                        <div class="card-header text-center">
                            <a href="/module/@item.Id" class="card-title text-decoration-underline" style="cursor: pointer; font-size: 24px; font-weight: bold;">
                                @item.Name
                            </a>
                        </div>
                        <div class="card-body">
                            <p class="card-text"><strong>Description:</strong> @item.Description</p>

                            
                            <div class="d-flex justify-content-center">
                                
                                <a href="/" class="btn btn-warning mx-2">Back to Home</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

}


@* <AuthorizeView Roles="Admin"> *@
@*     <Authorized> *@
@*         <p>Hej auth user</p> *@
@*     </Authorized> *@
@* </AuthorizeView> *@


@code {

    [Inject]
    private IApiService _apiService { get; set; } = default!;
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
   
    private List<CourseDto>? courses;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CallAPIAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading courses: {ex.Message}");
        }
    }
    private async Task CallAPIAsync()
    {
        courses = (await _apiService.GetAsync<IEnumerable<CourseDto>>("api/courses"))?.ToList() ?? [];
    }

    private void EditCourse(int courseId)
    {
        // Navigate to the EditCourse component with the courseId parameter
        Navigation.NavigateTo($"/editcourse/{courseId}");
    }

   
}
