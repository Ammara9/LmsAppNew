@page "/editcourse/{courseId:int}"
@rendermode InteractiveWebAssembly

@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.CourseDTO
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

@attribute [Authorize]

<h2>Edit Course</h2>

<EditForm Model="editCourseDto" method="put" OnValidSubmit="SaveCourseAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="name" class="col-sm-12 col-md-2 col-form-label fw-bold h4">Name</label>
        <div class="col-sm-12 col-md-4">
            <InputText id="name" class="form-control form-control-lg bg-light mb-3" @bind-Value="editCourseDto.Name" />
        </div>
    </div>

    <div class="form-group row">
        <label for="description" class="col-sm-12 col-md-2 col-form-label fw-bold h4">Description</label>
        <div class="col-sm-12 col-md-4">
            <InputText id="description" class="form-control form-control-lg bg-light mb-3" @bind-Value="editCourseDto.Description" />
        </div>
    </div>

    <div class="form-group row">
        <label for="startDate" class="col-sm-12 col-md-2 col-form-label fw-bold h4">Start Date</label>
        <div class="col-sm-12 col-md-4">
            <InputDate id="startDate" class="form-control form-control-lg bg-light mb-3" @bind-Value="editCourseDto.StartDate" />
        </div>
    </div>
    <div class="d-flex gap-2 mb-4">
        <a href="/courses" class="btn btn-primary ">Back to Course</a>
        <button type="submit" class="btn btn-success" @onclick="SaveCourseAsync">Save</button>
    </div>
</EditForm>

<AuthorizeView Roles="Admin">
    <Authorized>
        <p>Hej auth user</p>
    </Authorized>
</AuthorizeView>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @(IsSuccess ? "alert-success" : "alert-danger") mt-2">@Message</div>
}

@code {

    [Parameter]
    public int courseId { get; set; }

    [Inject]
    private IApiService _apiService { get; set; } = default!;
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    private CourseDto courseDto = new CourseDto();
    private CourseUpdateDto editCourseDto = new CourseUpdateDto();
    private string? Message;
    private bool IsSuccess = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await OnLoadChanges();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading courses: {ex.Message}");
        }
    }

    private async Task OnLoadChanges()
    {
        courseDto.Id = courseId;
        var existingCourseDto = (await _apiService.GetAsyncById<CourseDto, CourseUpdateDto>($"api/courses/{courseId}", courseDto));
        if (existingCourseDto == null)
        {
            throw new Exception("Course not found");
        }

        UpdateLocalCourseData(existingCourseDto);
    }

    private async Task SaveCourseAsync()
    {
        try
        {
            editCourseDto.CourseId = courseId;
            var updatedCourse = (await _apiService.PutAsyncById<CourseUpdateDto, CourseUpdateDto>($"api/courses/{courseId}", editCourseDto));
            if (updatedCourse == null)
            {
                throw new Exception("Course not found");
            }

            UpdateLocalCourseData(updatedCourse);

            ShowMessage("Course updated successfully", true);
            StartDismissTimer();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error updating course: {ex.Message}");
            ShowMessage("Failed to update the course. Please try again.", isSuccess: false);
        }
    }

    private void UpdateLocalCourseData(CourseUpdateDto updatedCourse)
    {
        editCourseDto.CourseId = updatedCourse.CourseId;
        editCourseDto.Name = updatedCourse.Name;
        editCourseDto.Description = updatedCourse.Description;
        editCourseDto.StartDate = updatedCourse.StartDate;
    }

    private void ShowMessage(string message, bool isSuccess)
    {
        Message = message;
        IsSuccess = isSuccess;
        StartDismissTimer();
    }

    private void StartDismissTimer()
    {
        // Dismiss the alert after 5 seconds (5000 ms)
        var timer = new System.Timers.Timer(5000);
        timer.Elapsed += (sender, args) =>
        {
            Message = string.Empty;
            timer.Stop();
            timer.Dispose();
            InvokeAsync(StateHasChanged); // Trigger UI update
        };
        timer.Start();
    }

}
