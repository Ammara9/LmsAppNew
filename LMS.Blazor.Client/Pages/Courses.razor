@page "/courses"
@rendermode InteractiveWebAssembly

@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize]

<h1>Courses</h1>

<button class="btn btn-primary" @onclick="CallAPIAsync">Get Courses</button>

@if (courses == null)
{
    <p>API not called yet</p>
}
else
{
    <table class="table">
        <thead>
            <tr>

                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Start Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in courses)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>@item.StartDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>Add a New Course</h2>
<EditForm Model="newCourse" method="post" OnValidSubmit="AddCourseAsync">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="newCourse.Name" />
    </div>
    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" class="form-control" @bind-Value="newCourse.Description" />
    </div>
    <div class="form-group">
        <label for="startDate">Start Date</label>
        <InputDate id="startDate" class="form-control" @bind-Value="newCourse.StartDate" />
    </div>
    <button type="submit" class="btn btn-success">Submit</button>
</EditForm>

@code {
    // [SupplyParameterFromForm]
    private List<CourseDto>? courses;
    private CourseDto newCourse = new() { StartDate = DateTime.Now };
    [Inject]
    private IApiService _apiService { get; set; } = default!;
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;



    private async Task CallAPIAsync()
    {
        courses = (await _apiService.CallApiAsync<IEnumerable<CourseDto>>("api/courses"))?.ToList() ?? [];
    }

    private async Task AddCourseAsync()
    {
        // Call PostApiAsync to send the new course data
        var createdCourse = await _apiService.PostApiAsync<CourseDto, IEnumerable<CourseDto>>("api/courses", newCourse);

        if (createdCourse != null)
        {
            // Refresh the course list if the course was successfully created
            await CallAPIAsync();
        }
        else
        {
            // Handle the failure case, such as logging or showing an error message
            Console.WriteLine("Failed to add the course.");
        }
    }

}
