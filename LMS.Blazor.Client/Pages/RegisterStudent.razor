@page "/registerstudent/{courseId:int}"
@using Domain.Models.Entities
@using LMS.Blazor.Client.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject ICourseService CourseService
@inject UserManager<ApplicationUser> UserManager

<h3>Register Students to Course</h3>
<p>Below are the students. You can assign or unassign them to this course.</p>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (students == null || !students.Any())
        {
            <tr>
                <td colspan="3">No students found.</td>
            </tr>
        }
        else
        {
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.Name</td>
                    <td>@student.Email</td>
                    <td>
                        @if (IsStudentAssignedToCourse(student))
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => UnassignStudentFromCourse(student)">Unassign</button>
                        }
                        else
                        {
                            <button class="btn btn-success btn-sm" @onclick="() => AssignStudentToCourse(student)">Assign</button>
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
@code {
    [Parameter] public int courseId { get; set; }
    private List<ApplicationUser> students;
    private List<ApplicationUser> assignedStudents = new();

    protected override async Task OnInitializedAsync()
    {
        students = await UserManager.Users.ToListAsync();
        assignedStudents = await CourseService.GetAssignedStudents(courseId);
    }

    private bool IsStudentAssignedToCourse(ApplicationUser student)
    {
        return assignedStudents.Any(s => s.Id == student.Id);
    }

    private async Task AssignStudentToCourse(ApplicationUser student)
    {
        if (!IsStudentAssignedToCourse(student))
        {
            assignedStudents.Add(student);
            await CourseService.AssignStudentToCourse(courseId, student.Id);
        }
    }

    private async Task UnassignStudentFromCourse(ApplicationUser student)
    {
        if (IsStudentAssignedToCourse(student))
        {
            assignedStudents.Remove(student);
            await CourseService.UnassignStudentFromCourse(courseId, student.Id);
        }
    }
}
