@page "/addactivity/{moduleId:int}"
@rendermode InteractiveWebAssembly

@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs
@using LMS.Shared.DTOs.CourseDTO
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms


@attribute [Authorize]

<p>Course: @module?.Course?.Name</p>
<p>Module: @module?.Name</p>
<h2>Add a New Activity</h2>
<EditForm Model="newActivityDto" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="name" class="col-sm-12 col-md-2 col-form-label fw-bold h4">Name</label>
        <div class="col-sm-12 col-md-4">
            <InputText id="name" class="form-control form-control-lg bg-light mb-3" @bind-Value="newActivityDto.Name" />
        </div>
    </div>

    <div class="form-group row">
        <label for="description" class="col-sm-12 col-md-2 col-form-label fw-bold h4">Description</label>
        <div class="col-sm-12 col-md-4">
            <InputText id="description" class="form-control form-control-lg bg-light mb-3" @bind-Value="newActivityDto.Description" />
        </div>
    </div>

    <div class="form-group row">
        <label for="startDate" class="col-sm-12 col-md-2 col-form-label fw-bold h4">Start Date</label>
        <div class="col-sm-12 col-md-4">
            <InputDate id="startDate" class="form-control form-control-lg bg-light mb-3" @bind-Value="newActivityDto.StartDate" />
        </div>
    </div>
    <div class="form-group row">
        <label for="endDate" class="col-sm-12 col-md-2 col-form-label fw-bold h4">End Date</label>
        <div class="col-sm-12 col-md-4">
            <InputDate id="endDate" class="form-control form-control-lg bg-light mb-3" @bind-Value="newActivityDto.EndDate" />
        </div>
    </div>
    <div class="d-flex gap-2 mb-4">
        <a href="/courses" class="btn btn-primary ">Back to Module</a>
        <button type="submit" class="btn btn-success" @onclick="AddActivityAsync">Submit</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(SuccessMessage))
{//todo: change rest of file from module to activity
    <div class="alert alert-success mt-2">@SuccessMessage</div>
}

<h3>Existing Activities</h3>
@if (activities == null)
{
    <p>Loading activities...</p>
}
else if (activities.Count == 0)
{
    <p>No activities found for this module.</p>
}
else
{
    <div class="list-group mt-4">
        @foreach (var activity in activities)
        {
            <div class="list-group-item mb-3" style="padding: 5px;">
                <!-- Module Header with Name and Add Activity Button -->
                <div class="d-flex justify-content-between align-items-center p-2" style="background-color: lightblue; border-radius: 5px;">
                    <h5 class="fw-bold">@activity.Name</h5>
                    <a href="/addactivity/@activity.Id" class="btn btn-success">Add Activity</a>
                </div>
                <!-- Subheader for Module Description and Dates -->
                <div class="mt-2" style="padding: 5px;">
                    <p class="mb-1"><strong>Description:</strong> @activity.Description</p>
                    <p class="mb-1"><strong>Start Date:</strong> @activity.StartDate.ToShortDateString()</p>
                    <p class="mb-1"><strong>End Date:</strong> @activity.EndDate.ToShortDateString()</p>
                </div>
                <!-- Uncomment the following block if you want to include the Activities List -->
                @* <div class="mt-3">
                @foreach (var activity in module.Activities)
                {
                    <div>
                        <p><strong>Activity Name:</strong> @activity.Name</p>
                        <p><strong>Description:</strong> @activity.Description</p>
                        <p><strong>Start Date:</strong> @activity.StartDate.ToShortDateString()</p>
                        <p><strong>End Date:</strong> @activity.EndDate.ToShortDateString()</p>
                        <hr />
                    </div>
                }
                @if (!module.Activities.Any())
                {
                    <p class="text-muted">No activities added yet.</p>
                }
            </div> *@
            </div>
        }
    </div>

}

@code {
    [Inject]
    private IApiService _apiService { get; set; } = default!;
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    [Parameter]
    public int moduleId { get; set; }

    private ModuleDto module = new();
    private ActivityDto newActivityDto = new() { StartDate = DateTime.Now, EndDate = DateTime.Now.AddDays(7) };
    private List<ActivityDto>? activities;
    private string? SuccessMessage;

    protected override async Task OnInitializedAsync()
    {
        await FetchActivitiesAsync();
        await FetchModuleAsync();
    }

    private async Task AddActivityAsync()
    {
        // var createdActivity = await _apiService.PostAsync<ActivityDto, ActivityDto>($"api/modules/{moduleId}/activity", newActivityDto);
        var createdActivity = await _apiService.PostAsync<ActivityDto, ActivityDto>($"api/activities", newActivityDto);

        if (createdActivity != null)
        {
            SuccessMessage = "Activity created successfully!";
            await FetchActivitiesAsync(); // Fetch the updated list of modules
            newActivityDto = new ActivityDto { StartDate = DateTime.Now, EndDate = DateTime.Now.AddDays(7) }; // Reset form
        }
        else
        {
            SuccessMessage = "Failed to create the activity.";
        }
    }

    private async Task FetchActivitiesAsync()
    {
        try
        {
            // activities = (await _apiService.GetAsync<IEnumerable<ActivityDto>>($"api/modules/{moduleId}/activity"))?.ToList();
            activities = (await _apiService.GetAsync<IEnumerable<ActivityDto>>($"api/activities/module/{moduleId}"))?.ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching activity: {ex.Message}");
        }
    }
    private async Task FetchModuleAsync()
    {
        try
        {
            module = (await _apiService.GetAsync<ModuleDto>($"api/modules/{moduleId}"));
            if (module == null) module = new ModuleDto();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching module: {ex.Message}");
        }
    }


}