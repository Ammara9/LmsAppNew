@page "/files/{moduleId:int}"
@rendermode InteractiveWebAssembly

@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components

@attribute [Authorize]

<h3>Module Files</h3>
@if (documents == null)
{
    <p>Loading documents...</p>
}
else if (documents.Count == 0)
{
    <p>No documents found for this module.</p>
}
else
{
    <div class="container mt-4">
        <!-- Back to Home Button (left-aligned) -->
        <div class="mb-3">
            <a href="/modulecontent" class="btn btn-primary">Back to Module</a>
        </div>

        <div class="list-group-item mb-3" style="padding: 5px; background-color: lightgray; border-radius: 5px; border: 1px solid #ddd;">
            <div class="row mb-2 ">
                <div class="col-3 fw-bold border-end">Name</div>
                <div class="col-3 fw-bold border-end">Description</div>
                <div class="col-3 fw-bold border-end">File</div>
                <div class="col-3 fw-bold">Uploaded At</div>
            </div>
        </div>


        <!-- List of Documents -->
        @foreach (var document in documents)
        {
            <div class="list-group-item mb-3" style="padding: 5px; border-radius: 5px; border: 1px solid #ddd;">
                <div class="p-2">
                    <!-- Row with Document Information -->
                    <div class="row mt-2">
                        <div class="col-3 fw-bold border-end">@document.Name</div>
                        <div class="col-3 border-end">@document.Description</div>
                        <div class="col-3 border-end"><p><a href="@document.FilePath" target="_blank">Download</a></p></div>
                        <div class="col-3">@document.UploadedAt.ToShortDateString()</div>
                    </div>
                </div>
            </div>
        }
    </div>




}

@code {
    [Inject]
    private IApiService _apiService { get; set; } = default!;

    [Parameter]
    public int courseId { get; set; }

    [Parameter]
    public int moduleId { get; set; }

    private List<DocumentDto>? documents;

    protected override async Task OnInitializedAsync()
    {
        await FetchDocumentsAsync();
    }

    private async Task FetchDocumentsAsync()
    {
        try
        {
            documents = (await _apiService.GetAsync<IEnumerable<DocumentDto>>($"api/courses/{courseId}/module/{moduleId}/document"))?.ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching documents: {ex.Message}");
        }
    }
}
