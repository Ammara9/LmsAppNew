@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Domain.Models.Entities
@using LMS.Blazor.Components.Account.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.WebUtilities
@using LMS.Blazor.Data
@using Microsoft.AspNetCore.Authorization

@* @using LMS.Infrastructure.Data *@


@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@* @inject LMS.Infrastructure.Data.LmsContext DbContext *@
@attribute [Authorize]



<PageTitle>Register</PageTitle>
@* <AuthorizeView Roles="Admin, Teacher"> *@
@* 	<NotAuthorized> *@
@* 		<RedirectToLogin /> *@
@* 	</NotAuthorized> *@
@* </AuthorizeView> *@

<div class="d-flex justify-content-center align-items-center">
	<div class="col-md-4">

		<h1 class="text-center">Register</h1>
		<StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
			<DataAnnotationsValidator />
			
			<h2 class="text-center">Create a new account</h2>
			<hr />
			<ValidationSummary class="text-danger" role="alert" />

			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.Name" class="form-control" autocomplete="name" aria-required="true" placeholder="name" />
				<label for="name">Name</label>
				<ValidationMessage For="() => Input.Name" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
				<label for="email">Email</label>
				<ValidationMessage For="() => Input.Email" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
				<label for="password">Password</label>
				<ValidationMessage For="() => Input.Password" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
				<label for="confirm-password">Confirm Password</label>
				<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
			</div>

			<div class="mb-3">
				<InputSelect @bind-Value="Input.Role" class="form-control">
					<option value="">-- Select Role --</option>
					<option value="Teacher">Teacher</option>
					<option value="Student">Student</option>
				</InputSelect>
				<ValidationMessage For="() => Input.Role" class="text-danger" />
			</div>

			<button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
		</EditForm>
	</div>
</div>

@* <div class="col-md-6 col-md-offset-2"> *@
@*     <section> *@
@*         <h3>Use another service to register.</h3> *@
@*         <hr /> *@
@*         <ExternalLoginPicker /> *@
@*     </section> *@
@* </div> *@

@if (!string.IsNullOrEmpty(ViewUserMessage))
{
	<div class="alert @(IsSuccess ? "alert-success" : "alert-danger") mt-2">@ViewUserMessage</div>
}

@code {

	private string? ViewUserMessage;
	private bool IsSuccess = true;
	private IEnumerable<IdentityError>? identityErrors;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

	[IgnoreAntiforgeryToken]
	public async Task RegisterUser(EditContext editContext)
	{
		if (!editContext.Validate())
		{
			// Validation failed; handle accordingly
			return;
		}

		var user = CreateUser();
		user.Name = Input.Name;
		user.Role = Input.Role; // Assign the role

		await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
		var emailStore = GetEmailStore();
		await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
		var result = await UserManager.CreateAsync(user, Input.Password);

		if (!result.Succeeded)
		{
			identityErrors = result.Errors;
			return;
		}

		await UserManager.AddToRoleAsync(user, Input.Role); // Add to selected role

		Logger.LogInformation("User created a new account with password.");
		ShowMessage("User created a new account with password.", true);

		var userId = await UserManager.GetUserIdAsync(user);
		var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
		code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
		var callbackUrl = NavigationManager.GetUriWithQueryParameters(
			NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
			new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

		await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

		// Clear the form
		Input = new InputModel();
		identityErrors = null;

		Logger.LogInformation("Registration successful. The form has been reset.");
		ShowMessage("Registration successful. The form has been reset.", true);
	}

	private ApplicationUser CreateUser()
	{
		try
		{
			return Activator.CreateInstance<ApplicationUser>();
		}
		catch
		{
			throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
				$"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
				ShowMessage("Failed to create a new account. Please try again.", false);
		}
	}

	private IUserEmailStore<ApplicationUser> GetEmailStore()
	{
		if (!UserManager.SupportsUserEmail)
		{
			throw new NotSupportedException("The default UI requires a user store with email support.");
		}
		return (IUserEmailStore<ApplicationUser>)UserStore;
	}

	private class InputModel
	{
		[Required]
		[Display(Name = "Name")]
		public string Name { get; set; } = "";

		[Required]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = "";

		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		[Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
		public string ConfirmPassword { get; set; } = "";

		[Required]
		[Display(Name = "Role")]
		public string Role { get; set; } = ""; // "Teacher" or "Student"
	}

	private void ShowMessage(string message, bool isSuccess)
	{
		ViewUserMessage = message;
		IsSuccess = isSuccess;
	}
}
